For Rust-Analyzer to not throw a fit for monorepo of crates, best to open actors as a new window with VSCode for now. 
Workspaces caused other issues with makefiles. 

Deploying application based on: 
https://cosmonic.com/docs/user_guide/deploying-your-application/

When using a monorepo this will diverge when you skip git push because build.yml is not run to generate keys. 
Manually generated keys will not be overwritten on subsequent package builds. 

Create $HOME/.wash/keys directory

run wash keys gen account
place seed in file:  ~/.wash/keys/<github_username>_account.nk. => In GitHub = WASH_ISSUER_KEY
public key is not needed as it can be generated from seed. 

run wash keys gen module  
place seed in file:  ~/.wash/keys/<github_username>_module.nk. => In GitHub = WASH_SUBJECT_KEY
public key is not needed as it can be generated from seed. 



TO DO: 
Refactor release.yml to allow for flexibility for mono or multirepo. 

Attempt 1: Env Variable - if fails try tag structure conditionality

Env variables: 

WASH_REPO_TYPE = MONO
or 
WASH_REPO_TYPE = MULTI

NEED TO MAKE A REPO TO TEST MONOREPO ACTION RELEASE


### OLD STUFF NOT TO DO ANYMORE - HERE FOR REFERENCE ###
create root level Cargo.toml, and define workspace with reference to every cargo crate related:
https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html

Defining workspaces in this way means that profiles for the non root package will be ignored, and we must specify profiles at the workspace root.
e.g. [profiles.release] in Cargo.toml at root instead of actors/actor/Cargo.toml

Must create Cargo.lock at root as well. Must make sure directories defined in workspace contain Crates.
`run cargo generate-lockfile`

Modify actions for actor and provider referenced from:
https://github.com/wasmCloud/examples/blob/main/.github/workflows/TEMPLATE_actor.yml
https://github.com/wasmCloud/examples/blob/main/.github/workflows/TEMPLATE_provider.yml